// Generated by gencpp from file create_message/number_complix.msg
// DO NOT EDIT!


#ifndef CREATE_MESSAGE_MESSAGE_NUMBER_COMPLIX_H
#define CREATE_MESSAGE_MESSAGE_NUMBER_COMPLIX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace create_message
{
template <class ContainerAllocator>
struct number_complix_
{
  typedef number_complix_<ContainerAllocator> Type;

  number_complix_()
    : reall()
    , imaginee()  {
    }
  number_complix_(const ContainerAllocator& _alloc)
    : reall(_alloc)
    , imaginee(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _reall_type;
  _reall_type reall;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _imaginee_type;
  _imaginee_type imaginee;





  typedef boost::shared_ptr< ::create_message::number_complix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::create_message::number_complix_<ContainerAllocator> const> ConstPtr;

}; // struct number_complix_

typedef ::create_message::number_complix_<std::allocator<void> > number_complix;

typedef boost::shared_ptr< ::create_message::number_complix > number_complixPtr;
typedef boost::shared_ptr< ::create_message::number_complix const> number_complixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::create_message::number_complix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::create_message::number_complix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::create_message::number_complix_<ContainerAllocator1> & lhs, const ::create_message::number_complix_<ContainerAllocator2> & rhs)
{
  return lhs.reall == rhs.reall &&
    lhs.imaginee == rhs.imaginee;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::create_message::number_complix_<ContainerAllocator1> & lhs, const ::create_message::number_complix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace create_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::create_message::number_complix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::create_message::number_complix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::create_message::number_complix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::create_message::number_complix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::create_message::number_complix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::create_message::number_complix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::create_message::number_complix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "824870208b69eefe6aae44af86b3c2d1";
  }

  static const char* value(const ::create_message::number_complix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x824870208b69eefeULL;
  static const uint64_t static_value2 = 0x6aae44af86b3c2d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::create_message::number_complix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "create_message/number_complix";
  }

  static const char* value(const ::create_message::number_complix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::create_message::number_complix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 reall\n"
"std_msgs/Float32 imaginee\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::create_message::number_complix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::create_message::number_complix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reall);
      stream.next(m.imaginee);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct number_complix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::create_message::number_complix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::create_message::number_complix_<ContainerAllocator>& v)
  {
    s << indent << "reall: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.reall);
    s << indent << "imaginee: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.imaginee);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CREATE_MESSAGE_MESSAGE_NUMBER_COMPLIX_H
