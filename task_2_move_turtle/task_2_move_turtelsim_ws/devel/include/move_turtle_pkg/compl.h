// Generated by gencpp from file move_turtle_pkg/compl.msg
// DO NOT EDIT!


#ifndef MOVE_TURTLE_PKG_MESSAGE_COMPL_H
#define MOVE_TURTLE_PKG_MESSAGE_COMPL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace move_turtle_pkg
{
template <class ContainerAllocator>
struct compl_
{
  typedef compl_<ContainerAllocator> Type;

  compl_()
    : real()
    , imagine()  {
    }
  compl_(const ContainerAllocator& _alloc)
    : real(_alloc)
    , imagine(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _real_type;
  _real_type real;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _imagine_type;
  _imagine_type imagine;





  typedef boost::shared_ptr< ::move_turtle_pkg::compl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_turtle_pkg::compl_<ContainerAllocator> const> ConstPtr;

}; // struct compl_

typedef ::move_turtle_pkg::compl_<std::allocator<void> > compl;

typedef boost::shared_ptr< ::move_turtle_pkg::compl > complPtr;
typedef boost::shared_ptr< ::move_turtle_pkg::compl const> complConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_turtle_pkg::compl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_turtle_pkg::compl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_turtle_pkg::compl_<ContainerAllocator1> & lhs, const ::move_turtle_pkg::compl_<ContainerAllocator2> & rhs)
{
  return lhs.real == rhs.real &&
    lhs.imagine == rhs.imagine;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_turtle_pkg::compl_<ContainerAllocator1> & lhs, const ::move_turtle_pkg::compl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_turtle_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_turtle_pkg::compl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_turtle_pkg::compl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_turtle_pkg::compl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_turtle_pkg::compl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_turtle_pkg::compl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_turtle_pkg::compl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_turtle_pkg::compl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6037b8259193f89f4a2a86bd6aab0df";
  }

  static const char* value(const ::move_turtle_pkg::compl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6037b8259193f89ULL;
  static const uint64_t static_value2 = 0xf4a2a86bd6aab0dfULL;
};

template<class ContainerAllocator>
struct DataType< ::move_turtle_pkg::compl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_turtle_pkg/compl";
  }

  static const char* value(const ::move_turtle_pkg::compl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_turtle_pkg::compl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 real\n"
"std_msgs/Float32 imagine \n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::move_turtle_pkg::compl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_turtle_pkg::compl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.real);
      stream.next(m.imagine);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct compl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_turtle_pkg::compl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_turtle_pkg::compl_<ContainerAllocator>& v)
  {
    s << indent << "real: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.real);
    s << indent << "imagine: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.imagine);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_TURTLE_PKG_MESSAGE_COMPL_H
